내부클래스

1.인스턴스 내부 클래스
  instance - 실체: 생성된 객체 = 객체
  - 멤버변수(인스턴스 변수), 인스턴스 메서드

2.정적 내부 클래스
  static - 정적변수, 정적 메서드

3.지역 내부 클래스
  함수(메서드)
  -추상클래스
  -인터페이스
★★★★★★★★
 -추상클래스, 인터페이스 객체를 생성할 수 있는 조건?
  - 1)특정 환경(지역 내부 -함수, 메서드), 2)멤버 변수
  - 3)미구현된 메서드를 구현

  Runnable
-----------------------------------------------------
예외 처리
1. 오류와 예외
오류(Error) = 시스템 문제,...

예외(Exception) - 코드 상의 문제...
   -프로그래머가 통제 가능한 상황

2.예외 클래스의 종류
Exception //컴파일시 예외
   - 예외가 처리되지 않으면 컴파일 자체가 X

RuntimeException //실행중 예외
  - 컴파일 OK, - 실행중에 예외 체크


Throwable
  Exception
  RuntimeException

3.try- catch-finally문

try {
  // 예외가 발생할지도 모르는 구간
} catch(예외 객체 예) Exception e) {
  //예외가 발생하면 유입되는 구간
...
} catch(예외 객체) {
...
} finally {
  //예외가 발생하든 안하든 항상 실행되는 구간
}


4.

5.예외 미루기
throws ->예외가 발생하는 메서드를 호출하는 쪽에서 처리를 미루는 것
Exception 계열(컴파일시 체크되는 예외)에서만 전가시 throws를 명시
참고)RuntimeException 계열의 예외(실행중 체크되는 예외) 따로 throws 명시 X

throwable
Exception 
  RuntimeException 이 아닌 예외(컴파일시 체크되는 예외)
  - 예외를 처리를 하지 않으면 컴파일X -반드시 처리해야 하는 예외

  RuntimeException인 예외(실행중 체크되는 예외)
  - 예외처리를 하지 않아도 컴파일 O - 실행중 체크되는 예외


예외 전가
 - 메서드를 호출하는 족에서 예외 처리를 전가 (throws)
 - Exception(RuntimeException이 아닌 예외)

 - RuntimeException계열의 예외는 전가 표기X(throws) ->유연한 예외처리 가능



6.다중 예외



































3.try-catc-fanally문