객체지향 프로그래밍1

1.메서드(함수)
 접근제한자 반환자료형 함수명(매개변수..){
 //프로그램이 실행되느느 영역

  return 반환값;
}

2x + 1 = y

객체의 멤버변수, 메서드 접근 -> 마침표 연산자

메모리

데이터 영역
스택 영역
힙 영역

스택(Stack): 쌓다

큐(Queue): 대기줄


main() -> 애플리케이션 시작 지점 함수


관례
클래스명 -> 앞글자 대문자, 시작되는 단어 첫글자 대문자
  Student, Car

메서드명 -> 단어의 첫글자 대문자(첫 단어의 첫글자는 소문자)
  printOrder


2.클래스와 인스턴스

3.인스턴스와 힙 메모리
인스턴스(instance) -> 실체 = 객체

4.인스턴스와 참조변수
클래스 형태의자료형 전부 참조 자료형 - 전부 동일 크기

5.참조자료형

기본 자료형
 - 일정 공간을 가지고 값을 저장(정수형-1, 2, 3, 4 실수형- 4, 8 , 논리형- 1, 문자형- 2)

참조 자료형(클래스 자료형)
    -객체의 주소값을 참조하는 자료형
    - 실제 저장값 :  주소값(정수)- 4

6.생성자
  - 객체를 생성해 주는 메서드(함수)
  - 객체 생성(주요 역할)
  - 클래스명과 동일한 명칭의 메서드
  - 반환 타입 정의 X
  - 멤버변수의 초기화(부가적인 기능)

  - 기본 생성자
   - 따로 정의하지 않아도 기본적으로 컴파일러가 추가해주는 메서드
   - 생성자가 하나도 없을때
  - 생성자 오버로드 
    - 다양한 매개변수를 가진 동일명칭의 생성자

  - 메서드 오버로드
    - 다양한 매개변수, 다양한 반환값을 가진 동일명칭의 메서드


7.접근제어자
public(모든 패키지 내부 외부) > protected(동일 패키지 + 상속) > default(동일 패키지) > private(동일 클래스 내부)

public - 패키지에 상관없이 모든 클래스에서 접근 가능한 클래스, 메서드, 멤버 변수

protected - 동일 패키지 내에서 클래스 내부 외부접근이 가능하고,
            타 패키지에서는 상속을 통해서 클래스 내부에서만 접근 가능

default - 동일 패키지 내에서 클래스 내부 외부 접근 가능

private - 클래스 내부에서만 접근 가능(외부 접근 X)

다른 패키지에 있는 클래스를 불러올때
import 패키지명.클래스명






























































 