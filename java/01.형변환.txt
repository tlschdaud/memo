형변환

- 묵시적 형변환
작은 자료형 -> 큰 자료형 대입 : 자동으로 큰 자료형으로 변환
      정수     ->     실수 : 자동으로 형변환
(덜 정밀한 수)  (더 정밀한 수)

byte < short < int < long < float < double

-명시적 형변환
큰 자료형 => 작은 자료형 : 손실 발생 가능성O -> 명시적으로 표현
실수 -> 정수 : 손실 발생 가능성O (소수점)

실수가 정수보다는 표현 숫자가 더 많다.
실수는 정수를 다 포함한다.

실수 -> 정수보다 더 정밀한 수
-------------------------------------------------------------------------------
연산자

항과 연산자

항 -> 연산에 사용된 값
연산자 -> 연산에 사용되는 기호(+,-,*,...)
   단항 연산자 ++num, num++, num+=2;

일항 연산자(연산에 사용되는 값이 1)
이항 연산자(연산에 사용되는 값이 2)
	10 + 20

	int num3 = num1 + num2;

삼항 연산자(연산에 사용되는 값이 3)

- 조건 연산자
(조건식)? 참일때 : 거짓일때

연산자의 종류

연산자의 종류
1.대입 연산자
  연산자 기호 : =
  의미 : 값을 변수에 저장한다. ex) int num = 10; / int sum = 10 + 20;
  적용의 우선순위가 가장 낮은 연산자
2.부호 연산자
  양수, 음수
  +
  - →부호 반전

  음수 → 양수
  양수 → 음수

3.산술 연산자
  - 우선순위

  +, -, *, /, → 사칙연산

  10 + 2 * 3 
  
  % → 나머지 연산
  
  *, /, % > +, -
  () → 우선순위를 가장 높여주는 연산

4. 증가감소 연산자(1씩 증가, 1씩 감소)
     일항 연산(단항 연산)
     num++  // 대입 → 연산
     ++num  // 연산 → 대입

     num--  // 대입 → 연산
     --num  // 연산 → 대입	

5.관계연산자(비교 연산자)
>, <, <=, >=, ==, !=

연산의 결과
참, 거짓(true, boolean)

6. 논리연산자
AND(교집합) : 각 항의 전부 공통적으로 참이여야 참인 조건
 &&
 OR(합집합) : 각 항중에  하나만이라도 참이면 참인 조건
  ||

NOT(부정) : !

비교 연산이 논리 연산보다 우선 순위 높다.

7.복합대입연산자 → 단한 연산
  대입 연산자 + 다른 연산자(산술연산)
  
  num = num + 2; // num += 2;

8. 조건연산자(삼항조건연산자)
(조건식 - 참, 거짓) ? 참일때 : 거짓일때

연산자의 우선순위
대입 < 논리 < 비교 < 단항 < --- < ()

char ch = 'A';

string