람다식(Lamba expression)
익명 객체
0. 함수형 프로그래밍
함수 : 하나의 독립적인 프로그램
함수는 값 : 매개변수로 함수를 값으로 사용이 가능
              반환 값으로 함수를 값으로 사용이 가능

자바스크립트

1. 람다식이란?
메서드 -> 하나의 식으로 구성

2. 람다식 문법 살펴보기

3. 람다식 사용하기

1) 람다식 구현 방법

2) 함수형 인터페이스(fumctional Interface)
  - 1개의 추상 메서드
  - default 메서드, static은 제한 없음
3) 함수형 인터페이스 타입의 매개변수와 반환 타입

4) java.util.function 패키지
  1) 매개변수 X 반환값 O
     - T Supplier<T> : T get()
  2) 매개변수가 1개 O 반환값이 X
     - Consumer<T> : void accept(T s)
  3) 매개변수가 1개 O 반환값도 1개 X
     - Function<T, R> : R apply(T t)
  4) 매개변수는 1개 O 반환값은 boolean으로 고정된 함수
     - Predicate<T> : boolean test(T t)
Bi로 시작하는 인터페이스가 매개변수가 2개
반환값 X, 매개변수가 2
  1) BiConsumer<T, U>
     - void accept(T t, U u);

반환값 O, 매개변수가 2
  2) BiFunction<T,U<R>
     - R apply(T t, U u)

반환값 boolean, 매개변수 2
  3) BiPredicate<T, U>
     - boolean test(T t, U u)

매개변수, 반환값이 같은 자료형
1) UnatyOperator<T> : Function<T, T>
  - T apply(T t)
2) BinaryOperator<T> : BiFunction<T, T, T>
  - T apply(T t, T t)
4. Function의 합성과 Predicate의 결합

5. 메서드 참조
























